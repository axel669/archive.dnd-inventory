import norn from "@axel669/norn/es6/norn.js"
import update from "@axel669/immutable-update"

let storage = {
    read(name, defaultValue) => {
        let source = localStorage.getItem(name)

        if source == null {
            return defaultValue
        }
        return JSON.parse(source)
    }

    write(name, value) => {
        localStorage.setItem(name, JSON.stringify(value))
    }
}

construct MapList {
    new(list = [], items = {}) => {
        if typeof list == "string" {
            {list, items} = JSON.parse(list)
        }
        [#list, #items] = [list, items]
    }

    add(item) => {
        let id = "${Date.now()}.${Math.random()}"
        return MapList(
            [...#list, id]
            {...#items, [id]: item}
        )
    }
    updateItem(id, newItem) => MapList(
        #list
        {...#items, [id]: newItem}
    )

    item(id) => #items[id]
    index(index) => #items[#list[index]]

    get list() => #list.map(
        (id) => {
            id
            info: #items[id]
        }
    )

    toJSON() => {
        list: #list
        items: #items
    }
}

window.wat = norn(
    {
        chars: {
            initial() => storage.read("chars", [])
            $add(chars, {type, ...ch}) => [...chars, ch]
        }
        bags: {
            initial() => {
                let source = storage.read("bags", {})

                return Object.keys(source).reduce(
                    (bags, key) => {
                        ...bags
                        [key]: MapList(source[key].list, source[key].list)
                    }
                    {}
                )
            }
            "chars.$add"(bags, {id}) => {
                ...bags
                [id]: MapList()
            }
            $add(bags, {id, item}) => {
                ...bags
                [id]: bags[id].add(item)
            }
            $update(bags, {id, item}) => {
                ...bags
                [id]: bags[id].updateItem(item.id, item.info)
            }
        }
    }
    {
        "chars.$add"(name) => {name, id: Date.now()}
        "bags.$add"(id, name) => {id, item: {name}}
        "bags.$update"(id, item) => {id, item}
    }
)

let mut last = wat.current
wat.subscribe(
    (newState) => {
        for key, value of newState {
            if last[key] != value {
                storage.write(key, value)
                console.log("updated:", key)
            }
        }
    }
)

let {actions, ...state} = wat

export {
    actions,
    state
}

import React, {Component, PureComponent} from "react"
import ReactDOM from "react-dom"

import update from "@axel669/immutable-update"

import norn from "@axel669/norn/es6/norn.js"

import MainRouter from "@router"
// import {state, actions} from "@state"
import Publisher from "@publisher"

let storage = {
    read(name, defaultValue) => {
        let source = localStorage.getItem(name)

        if source == null {
            return defaultValue
        }
        return JSON.parse(source)
    }

    write(name, value) => {
        localStorage.setItem(name, JSON.stringify(value))
    }
}

let state = (() => {
    let p = Publisher()

    let mut currentState = storage.read(
        "charList"
        {
            list: []
            items: {}
        }
    )

    return {
        get subscribe() => p.subscribe
        get current() => currentState
        publish(changes) => {
            currentState = update(
                currentState
                changes
            )

            return p.publish(currentState)
        }
    }
})()
let actions = {
    chars: {
        add(name) => {
            let id = Date.now()
            return state.publish({
                "list.$push": id
                "items.${id}.$set": {
                    id
                    name
                    bags: {
                        items: {}
                        list: []
                    }
                }
            })
        }
    }
    bag: {
        addItem(source, name) => {
            let id = Date.now()

            return state.publish({
                "items.${source}.list.$push": id
                "items.${source}.items.${id}.$set": {
                    id
                    name
                    count: 0
                    weight: 1
                }
            })
        }
        addBag(source, name, weight) => {
            let id = Date.now()

            return state.publish({
                "items.${source}.list.$push": id
                "items.${source}.items.${id}.$set": {
                    name
                    weight
                    list: []
                    items: {}
                }
            })
        }
    }
}

state.subscribe(
    (latest) => storage.write("charList", latest)
)


let bind = (target, key, description) => {
    let {value as unbound, writable, ...desc} = description

    return {
        ...desc
        get() =>* {
            let bound = unbound.bind(@)

            Object.defineProperty(
                @
                key
                {
                    value: bound
                    writeable: true
                    configurable: true
                }
            )

            return bound
        }
    }
}


class Main extends Component {
    constructor(props) => {
        super(props)

        @state = state.current
        state.subscribe(
            (newState) => @setState(newState)
        )
    }

    render() => {
        return <div>
            <CharList {...@state} />
            <BagDisplay chars=@state.items />
        </div>
    }
}

window.appActions = actions

@MainRouter.connect("/", true)
class CharList extends PureComponent {
    addChar() => {
        let name = prompt("")
        if name == null || name.trim() == "" {
            return
        }

        actions.chars.add(name)
    }

    render() => {
        return <div>
            <button onClick=@addChar>Add Char</button>
            {@props.list.map(
                (id) => <div key=id>
                    <a href="#/${id}">{@props.items[id].name}</a>
                </div>
            )}
        </div>
    }
}

let propSort = (...props) =>
    (first, second) => {
        for prop in props {
            let [a, b] = [first[prop], second[prop]]
            if a < b {
                return -1
            }
            if a > b {
                return 1
            }
        }
        return 0
    }

@MainRouter.connect("/:charID")
class BagDisplay extends PureComponent {
    @bind
    addBag() => {
        let {chars, _router: {params}} = @props
        let name = prompt("")
        if name == null || name.trim() == "" {
            return
        }

        actions.bag.addBag("${params.charID}.bags", name, null)
    }

    render() => {
        let {chars, _router: {params}} = @props
        let {bags, name} = chars[params.charID]

        return <div>
            <div>{name}</div>
            <button onClick=@addBag>Add Bag</button>
            {bags.list.map(
                (bagID) => <Bag key=bagID source="${params.charID}.bags.items.${bagID}" {...bags.items[bagID]} />
            )}
        </div>
        // return <Bag bag=bags[params.bagID] bagID=params.bagID />
    }
}
class Bag extends PureComponent {
    @bind
    addItem() => {
        let name = prompt("")
        if name == null || name.trim() == "" {
            return
        }

        actions.bag.addItem(@props.source, name)
    }

    @bind
    itemMap(id) => {
        let item = @props.items[id]

        return <tr key=id>
            <td>
                {item.name}
            </td>
            <td>
                {item.count}
            </td>
            <td>
                {item.weight * item.count}
            </td>
        </tr>
    }

    render() => {
        let {list, items, name} = @props

        return <div style={border: "1px solid black"}>
            <div>{name}</div>
            <button onClick=@addItem>Add Item</button>
            <table style={width: "100%"}>
                <tbody>
                    <tr>
                        <th>Item</th>
                        <th style={width: 40}>Count</th>
                        <th style={width: 40}>Weight</th>
                    </tr>
                    {list.map(@itemMap)}
                </tbody>
            </table>
        </div>
    }
}

ReactDOM.render(
    <Main />
    document.querySelector("app-root")
)


// import React, {Component, PureComponent} from "react"
// import ReactDOM from "react-dom"

import norn from "@axel669/norn/es6/norn.js"

import {state, actions} from "@state"

let {Component, PureComponent} = React

let createMatcher = (route, exact) => {
    let names = []
    let regexParts = route
        .replace(/^\//, "")
        .split("/")
        .map((check) => {
            if check.startsWith(":") == true {
                let name = check[1...]
                names.push(name)
                return "(\\w+)"
            }
            if check.startsWith("*") == true {
                let name = check[1...]
                names.push(name)
                return "(.*)"
            }
            return check
        })
    let endMatch = (exact == true) ? "$" : ""
    let regex = RegExp("^/?${regexParts.join("/")}/?${endMatch}")
    return (route) => {
        let match = route.match(regex)

        if match == null {
            return null
        }

        return names.reduce(
            (params, name, index) => {
                ...params
                [name]: match[index + 1]
            }
            {}
        )
    }
}

construct Router {
    new(routeListener) => {
        #routeListener = routeListener
    }

    connect(route, exactMatch = false) => {
        let matcher = createMatcher(route, exactMatch)
        return (Component) => class extends React.Component {
            static displayName = "Router[${Component.displayName ?? Component.name}]"

            constructor(props) => {
                super(props)

                @state = #routeListener.state
            }

            componentDidMount() => {
                #unsub = #routeListener.subscribe(
                    (newState) => @setState(newState)
                )
            }
            componentWillUnmount() => #ubsub()

            render() => {
                let params = matcher(@state.path)

                if params == null {
                    return null
                }
                return <Component {...@props} _router={...@state, params} />
            }
        }
    }
}

construct Publisher {
    new() => {
        #listeners = Map*()
    }

    publish(message) => {
        for handler in #listeners.values() {
            handler(message)
        }
    }

    subscribe(handler) => {
        let id = "${Date.now()}.${Math.random()}"
        #listeners.set(id, handler)
        return () => #listeners.delete(id)
    }
}

construct HashListener {
    new() => {
        #publisher = Publisher()

        #currentHash = @hash
        #interval = setInterval(
            () => {
                let hash = @hash

                if hash != #currentHash {
                    #currentHash = hash
                    @publish({
                        path: hash
                        parts: hash.split("/")
                    })
                }
            }
            50
        )
    }

    get hash() => location.hash.toString().replace(/^#/, "")

    get state() => {
        path: @hash
        parts: @hash.split("/")
    }

    get subscribe() => #publisher.subscribe
    get publish() => #publisher.publish
}

let MainRouter = Router(HashListener())

class Main extends Component {
    constructor(props) => {
        super(props)

        @state = state.current
        state.subscribe(
            (newState) => @setState(newState)
        )
    }

    render() => {
        return <div>
            <CharList chars=@state.chars />
            <BagDisplay bags={@state.bags} />
        </div>
    }
}

window.appActions = actions

@MainRouter.connect("/", true)
class CharList extends PureComponent {
    addChar() => {
        let name = prompt("")
        if name == null || name.trim() == "" {
            return
        }

        actions."chars.$add"(name)
    }

    render() => {
        return <div>
            <button onClick=@addChar>Add Char</button>
            {@props.chars.map(
                (ch) => <div>
                    <a href="#/${ch.id}">{ch.name}</a>
                </div>
            )}
        </div>
    }
}

@MainRouter.connect("/:bagID")
class BagDisplay extends PureComponent {
    render() => {
        return <div>
            Items?!
        </div>
    }
}

let screens = [CharList].reduce(
    (screens, screen) => {
        ...screens
        [screen.name]: screen
    }
    {}
)

ReactDOM.render(
    <Main />
    document.querySelector("app-root")
)

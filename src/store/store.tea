import {PureComponent} from "react"
import {createStore, combineReducers} from "redux"
import update from "immutable-update-values"
import {batchReducer} from "redux-batching"

// import Inventory from "@screen/Inventory.tea"

import itemSource from "@core/items.js"
import inventory from "@store/inventory.tea"

let batched = (target, name, desc) => {
    desc.value = batchReducer(desc.value)
    return desc
}

// let testItems = [
//     {name: "Herbs", count: 5, weight: 0.25, guid: b + 1}
//     {name: "Sword", count: 2, weight: 2, guid: b + 2}
//     {name: "Backpack", count: 1, weight: null, guid: b + 3, items: [
//         {name: "Candle", count: 3, weight: 0.5, guid: b + 4}
//         {name: "Bag of Holding", weight: 5, guid: b + 5, items: [
//             {name: "Kobold Skull", count: 2, weight: 0, guid: b + 6}
//         ]}
//     ]}
// ]
// // let testItems = []
// let items = (state = testItems, action) => switch action.type {
//     case "items.add" {
//         break update(
//             state,
//             {$push: {
//                 guid: Date.now()
//                 count: 0
//                 action.item,
//                 guid: Date.now()
//             }}
//         )
//     }
//     case "item.udpate" {
//         let index = state.findIndex((item) => item.guid == action.guid)
//         break udpate(
//             state,
//             {"${index}.${action.prop}$set": action.value}
//         )
//     }
//     default {
//         break state
//     }
// }

let itemList = (state = null, action) => state ?? itemSource

let screen = (state = Inventory, action) =>
    if action.type == "screen.change" {
        break action.screen
    }
    else {
        break state
    }

export default createStore(
    combineReducers({
        // @batched items
        @batched inventory
        @batched itemList
        @batched screen
    })
)

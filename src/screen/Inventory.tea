import React, {Component, PureComponent} from "react"
import doric from "doric-components"
import bind from "autobind-decorator"

import ItemList from "@screen/ItemList.tea"

import yggdrasil from "@core/yggdrasil.tea"
import sheet from "@core/style.tea"

import Card from "@component/Card.tea"

class Expandable extends PureComponent {
    constructor(props) => {
        super(props)
        @state = {expanded: false}
    }

    @bind
    toggle() => {
        let expanded = !@state.expanded
        @setState({expanded})
    }

    render() => {
        let [icon, display] = (@state.expanded == true)
            ? ["ion-minus", "block"]
            : ["ion-plus", "none"]
        return <item-expandable>
            <doric.iconButton block flush icon=icon text=@props.title onTap=@toggle />
            <div style={display}>
                {@props.children}
            </div>
        </item-expandable>
    }
}

sheet.addStyles({
    "item-grid": {
        display: "grid"
        gridTemplateColumns: "auto auto auto auto"
        gridAutoRows: 30
    }
    "item-grid > div": {
        display: "flex"
        alignItems: "center"
        justifyContent: "middle"
    }
})
class Item extends PureComponent {
    render() => {
        let {item, path} = @props
        let addOne = () => yggdrasil."inventory.update.count"(path, 1)
        // let

        return <Card>
            <Card.title main=item.name />

            <Card.content>
                <div>{item.guid}</div>
                <item-grid>
                    <div>Count</div>
                    <div>{item.count}</div>
                    <doric.button text="+1" flush flat primary onTap=addOne />
                    <doric.button text="-1" flush flat danger />

                    <div>Weight</div>
                    <div>{item.count * item.weight}</div>
                    <doric.button text="+X" flush flat primary />
                    <doric.iconButton icon="ion-trash-b" flush flat danger />
                </item-grid>
            </Card.content>
        </Card>
    }
}
class Container extends PureComponent {
    render() => {
        // let container = @props.item
        let {item, items, source, path} = @props
        return <Card container>
            <Card.title main=item.name />
            <Card.content>
                <div>{item.guid}</div>
                <Expandable title="Items">
                    {items.map(
                        (info, index) =>
                            <Display {...{info, source}}
                                path="${path}.${index}" />
                    )}
                </Expandable>
            </Card.content>
        </Card>
    }
}
class Display extends Component {
    render() => {
        let {info, source, path} = @props
        let item = source[info[0]]
        if Array.isArray(info[1]) == false {
            return <Item path=path item={...item, count: info[1]} />
        }
        else {
            return <Container {...{item, source, path}} items=info[1] />
        }
        // let Display = (item.items == undefined) ? Item : Container
        // return <Display item=item />
    }
}

let itemAddStyle = {
    position: "fixed"
    bottom: 0
    right: 0
    top: "auto"
    left: "auto"
    width: 40
    height: 40
}
class Inventory2 extends PureComponent {
    static propList = ["inventory"]

    render() => {
        let {structure, source} = @props.inventory
        return <doric.appContainer title="Inventory">
            <div style={height: 0.1} />
            {structure.map(
                (info, index) => <Display info=info source=source path=index />
            )}
            <doric.iconButton action primary
                style=itemAddStyle icon="ion-plus" />
        </doric.appContainer>
    }
}

export default Inventory2

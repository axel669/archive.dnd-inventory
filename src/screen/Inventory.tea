import React, {Component, PureComponent} from "react"
import doric from "doric-components"
import bind from "autobind-decorator"

import ItemList from "./ItemList.tea"

import yggdrasil from "../yggdrasil.tea"
import sheet from "../style.tea"

sheet.addStyles({
    "table": {
        tableLayout: "fixed"
        width: "100%"
    }
    "tbody": {
        height: 200
        "overflow-y": "scroll"
    }
    "td": {
        border: "1px solid black"
        width: "100%"
    }
    ".test th": {
        height: 0
        border: "0px solid transparent"
    }
})

class Spreadsheet extends PureComponent {
    @bind
    defaultRow() =>
        <tr>
            {@props.headers.map(
                (header) => {
                    let display = switch {
                        case header.display != undefined {
                            break header.display
                        }
                        case header.accessor != undefined {
                            break (item) => item[header.accessor]
                        }
                        default {
                            break (item) => item[header]
                        }
                    }

                    return <td>{display(item)}</td>
                }
            )}
        </tr>
    render() => {
        let row = @props.row ?? @defaultRow
        return (
            <table>
                <thead>
                    <tr>
                        {@props.headers.map(
                            (header, i) =>
                                <th key={i} style={header.style}>
                                    {header.title ?? header}
                                </th>
                        )}
                    </tr>
                </thead>
                <tbody>
                    {@props.data.map(row)}
                </tbody>
            </table>
        )
    }
}

class Inventory extends PureComponent {
    static propList = ["items"]

    addItem() =>
        yggdrasil.screen.change(ItemList)

    render() => {
        let headers = [
            {
                title: ""
                display({item}) => item.name
                style: {
                    width: "60%"
                }
            }
            {
                title: ""
                display({count}) => count
            }
            {
                title: ""
                display({item}) => item.price
            }
            {
                title: ""
                display(item) =>
                    <doric.iconButton block flush
                        icon="ion-edit"
                        onTap={() => console.log(item)} />
            }
        ]
        return <div>
            <doric.button.pure block text="Add" onTap=@addItem />
            {false && <Spreadsheet data=@props.items headers=headers />}
            <div className="test">
            <doric.grid>
                {@props.items.map(
                    ({item, guid, count}) =>
                        <div key=guid>
                            <doric.grid.col size=12>
                                {item.name}
                            </doric.grid.col>
                            <doric.grid.col size=2>
                                {count}
                            </doric.grid.col>
                            <doric.grid.col size=8>&nbsp;</doric.grid.col>
                            <doric.grid.col size=2>
                                <doric.iconButton block flush icon="ion-trash" />
                            </doric.grid.col>
                        </div>
                )}
            </doric.grid>
            </div>
        </div>
    }
}

sheet.addStyles({
    "item-card": {
        display: "block"
        margin: 4
        // padding: 8
        backgroundColor: "white"
        boxShadow: "2px 2px 2px rgba(0, 0, 0, 0.25)"
        border: "1px solid lightgray"
        position: "relative"
    }
    "item-card[container]": {
        // backgroundColor: "#75cece"
        border: "1px solid black"
    }
    // "item-card[container] *": {
    //     zIndex: 1
    // }
    // "item-card[container]::before": {
    //     position: "absolute"
    //     content: "\"\""
    //     top: 0
    //     left: 0
    //     width: "100%"
    //     height: "100%"
    //     backgroundColor: "rgba(0, 255, 255, 0.1)"
    //     zIndex: 0
    // }
    "item-card-title": {
        margin: "2px 2px 4px 2px"
        display: "block"
        fontSize: 18
        fontWeight: "bold"
    }
    "item-card-content": {
        display: "block"
        margin: 8
    }
    "item-expandable": {
        display: "block"
        backgroundColor: "white"
        borderRadius: 3
        paddingBottom: 4
    }
})
let Card = ({children, ...props}) => <item-card {...props}>
    {children}
</item-card>
Card.title = (props) => <item-card-title>{props.main}</item-card-title>
Card.content = ({children}) => <item-card-content>{children}</item-card-content>

class Expandable extends PureComponent {
    constructor(props) => {
        super(props)
        @state = {expanded: false}
    }

    @bind
    toggle() => {
        let expanded = !@state.expanded
        @setState({expanded})
    }

    render() => {
        let [icon, display] = (@state.expanded == true)
            ? ["ion-minus", "block"]
            : ["ion-plus", "none"]
        return <item-expandable>
            <doric.iconButton block flush icon=icon text=@props.title onTap=@toggle />
            <div style={display}>
                {@props.children}
            </div>
        </item-expandable>
    }
}

sheet.addStyles({
    "item-grid": {
        display: "grid"
        // gridTemplateAreas: "
        //     \"d a a b\"
        //     \"d c c b\"
        //     ;"
        gridTemplateColumns: "auto auto auto auto"
        gridAutoRows: 30
    }
    "item-grid > div": {
        display: "flex"
        alignItems: "center"
        justifyContent: "middle"
    }
})
class Item extends PureComponent {
    render() => {
        let item = @props.item
        return <Card>
            <Card.title main=item.name />

            <Card.content>
                <item-grid>
                    <div>Count</div>
                    <div>{item.count}</div>
                    <doric.button text="+1" flush />
                    <doric.button text="-1" flush />

                    <div>Weight</div>
                    <div>{item.count * item.weight}</div>
                    <doric.button text="+X" />
                    <doric.iconButton icon="ion-trash-b" />
                </item-grid>
            </Card.content>
        </Card>
    }
}
class Container extends PureComponent {
    render() => {
        let container = @props.item
        return <Card container>
            <Card.title main=container.name />
            <Card.content>
                <Expandable title="Items">
                    {container.items.map(
                        (item) => <Display item=item />
                    )}
                </Expandable>
            </Card.content>
        </Card>
    }
}
class Display extends Component {
    render() => {
        let item = @props.item
        let Display = (item.items == undefined) ? Item : Container
        return <Display item=item />
    }
}

let itemAddStyle = {
    position: "absolute"
    bottom: 0
    right: 0
    top: "auto"
    left: "auto"
    width: 40
    height: 40
}
class Inventory2 extends PureComponent {
    static propList = ["items"]

    render() => {
        return <div>
            <div style={height: 0.1} />
            {/* <pre style={margin: 0}>{JSON.stringify(@props, null, "  ")}</pre> */}
            {@props.items.map(
                (item) => <Display item=item />
            )}
            <doric.iconButton action primary
                style=itemAddStyle icon="ion-plus" />
        </div>
    }
}

export default Inventory2
